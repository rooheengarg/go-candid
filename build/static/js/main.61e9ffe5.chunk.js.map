{"version":3,"sources":["components/CameraFeed/index.js","index.js"],"names":["CameraFeed","takePhoto","sendFile","props","canvas","getContext","drawImage","videoPlayer","toBlob","devices","forEach","device","console","log","label","setDevice","deviceId","navigator","mediaDevices","getUserMedia","audio","video","stream","this","srcObject","play","enumerateDevices","cameras","processDevices","className","ref","width","heigh","onClick","height","Component","App","uploadImage","file","a","FormData","append","ReactDOM","render","document","getElementById"],"mappings":"qPAiEeA,G,kNAtBXC,UAAY,WAAO,IACPC,EAAa,EAAKC,MAAlBD,SACQ,EAAKE,OAAOC,WAAW,MAC/BC,UAAU,EAAKC,YAAa,EAAG,EAAG,IAAK,KAC/C,EAAKH,OAAOI,OAAON,I,6DAvCRO,GAAU,IAAD,OACpBA,EAAQC,SAAQ,SAAAC,GACZC,QAAQC,IAAIF,EAAOG,OACnB,EAAKC,UAAUJ,Q,yEASPA,G,gFACJK,EAAaL,EAAbK,S,SACaC,UAAUC,aAAaC,aAAa,CAAEC,OAAO,EAAOC,MAAO,CAAEL,c,OAA5EM,E,OACNC,KAAKhB,YAAYiB,UAAYF,EAC7BC,KAAKhB,YAAYkB,O,iRAUKR,UAAUC,aAAaQ,mB,OAAvCC,E,OACNJ,KAAKK,eAAeD,G,qIAed,IAAD,OACL,OACI,yBAAKE,UAAU,iBACX,yBAAKA,UAAU,yBACX,2BAAOA,UAAU,uBAAuBC,IAAK,SAAAA,GAAG,OAAK,EAAKvB,YAAcuB,GAAMC,MAAM,MAAMC,MAAM,QAChG,4BAAQC,QAASV,KAAKtB,WAAtB,gBAEJ,yBAAK4B,UAAU,wBACX,4BAAQE,MAAM,MAAMG,OAAO,MAAMJ,IAAK,SAAAA,GAAG,OAAK,EAAK1B,OAAS0B,W,GAxDtDK,cCGpBC,G,MAAM,SAACjC,GACb,IACMkC,EAAW,uCAAG,WAAMC,GAAN,SAAAC,EAAA,uDACC,IAAIC,UACZC,OAAO,OAAQH,GAFR,2CAAH,sDAKb,OACI,yBAAKT,UAAU,OACX,wBAAIA,UAAU,WAAd,sBACA,kBAAC,EAAD,CAAY3B,SAAUmC,OAKlCK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.61e9ffe5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './styles.scss';\n class CameraFeed extends Component {\n    /**\n     * Processes available devices and identifies one by the label\n     * @memberof CameraFeed\n     * @instance\n     */\n    processDevices(devices) {\n        devices.forEach(device => {\n            console.log(device.label);\n            this.setDevice(device);\n        });\n    }\n\n    /**\n     * Sets the active device and starts playing the feed\n     * @memberof CameraFeed\n     * @instance\n     */\n    async setDevice(device) {\n        const { deviceId } = device;\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: false, video: { deviceId } });\n        this.videoPlayer.srcObject = stream;\n        this.videoPlayer.play();\n    }\n\n    /**\n     * On mount, grab the users connected devices and process them\n     * @memberof CameraFeed\n     * @instance\n     * @override\n     */\n    async componentDidMount() {\n        const cameras = await navigator.mediaDevices.enumerateDevices();\n        this.processDevices(cameras);\n    }\n\n    /**\n     * Handles taking a still image from the video feed on the camera\n     * @memberof CameraFeed\n     * @instance\n     */\n    takePhoto = () => {\n        const { sendFile } = this.props;\n        const context = this.canvas.getContext('2d');\n        context.drawImage(this.videoPlayer, 0, 0, 680, 360);\n        this.canvas.toBlob(sendFile);\n    };\n\n    render() {\n        return (\n            <div className=\"c-camera-feed\">\n                <div className=\"c-camera-feed__viewer\">\n                    <video className=\"c-camera-feed__stage\" ref={ref => (this.videoPlayer = ref)} width=\"600\" heigh=\"360\" />\n                    <button onClick={this.takePhoto}>Take photo!</button>\n                </div>\n                <div className=\"c-camera-feed__stage\">\n                    <canvas width=\"600\" height=\"360\" ref={ref => (this.canvas = ref)} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CameraFeed;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CameraFeed from './components/CameraFeed';\nimport './style.scss';\n\nconst App = (props) => {\nconst wordsArray = ['Candid', 'Crazy', 'Capture', 'Catchy']; \nconst uploadImage = async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n};\n\n    return (\n        <div className=\"App\">\n            <h1 className=\"heading\">Image capture test</h1>\n            <CameraFeed sendFile={uploadImage} />\n        </div>\n    );\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}